#include <stdio.h>
#include <stdlib.h>

// Structure representing a new tree node
struct node {
	int data;
	struct node *left;
	struct node *right;
};

// Function to create new tree node
struct node *CreateTreeNode (int data) {
	struct node *node = (struct node*) malloc (sizeof(struct node));
	if (node == NULL) {
		printf ("\nMemory could not be allocated!");
		return node;
	}
	
	node->data = data;
	node->left = NULL;
	node->right = NULL;
	return node;
}

// Function for Inorder Traversal of the provided tree
void InorderTraversal (struct node *root) {
	if (root == NULL) {
		return;
	}
	
	InorderTraversal (root->left);
	printf ("%d ", root->data);
	InorderTraversal (root->right);
}

// Function for Preorder Traversal of the provided tree
void PreorderTraversal (struct node *root) {
	if (root == NULL) {
		return;
	}
	
	printf ("%d ", root->data);
	PreorderTraversal (root->left);
	PreorderTraversal (root->right);
}

// Function for Postorder Traversal of the provided tree
void PostorderTraversal (struct node *root) {
	if (root == NULL) {
		return;
	}
	
	PostorderTraversal (root->left);
	PostorderTraversal (root->right);
	printf ("%d ", root->data);
}

int main(void) {
	struct node *root = NULL;
	root = CreateTreeNode (1);
	root->left = CreateTreeNode (2);
	root->right = CreateTreeNode (3);
	root->left->left = CreateTreeNode (4);
	root->left->right = CreateTreeNode (5);
	
	// Tree Traversals
	printf ("Inorder Traversal : ");
	InorderTraversal (root);
	printf ("\nPreorder Traversal : ");
	PreorderTraversal (root);
	printf ("\nPostorder Traversal : ");
	PostorderTraversal (root);
	return 0;
}
